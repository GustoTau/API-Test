using NUnit.Framework;
using RestSharp;
using RestSharp.Serialization.Json;
using RestSharpFramework.Helpers;
using RestSharpFramework.Objects;
using System;
using System.Collections.Generic;
using System.IO;
using TechTalk.SpecFlow;

namespace RestSharpFramework.Step_Definitions
{

    [Binding]
    public class PetsSteps
    {
        private RestClient client;
        private RestRequest request;
        private IRestResponse response;

        public static FeatureContext _featureContext;
        public PetsSteps(FeatureContext featureContext)
        {
            PetsSteps._featureContext = featureContext;
        }

        [Given(@"user sends a GET request to retrive all available pets")]
        public void GivenUserWantsToRetriveAllAvailablePets()
        {
            client = new RestClient(Data.PetAPIAvailableSearch);
            request = new RestRequest(Method.GET);
        }
        
        [Then(@"verify that the name ""(.*)"" with category id ""(.*)"" is on the list")]
        public void ThenVerifyThatTheNameWithCategoryIdIsOnTheList(string name, Int64 id)
        {
            response = client.Execute(request);
            List<PetObject> searchresponse = new JsonDeserializer().Deserialize<List<PetObject>>(response);
            for (int i = 0; i < searchresponse.Count; i++)
            {
                if (name == searchresponse[i].name)
                {
                    if (searchresponse[i].category != null)
                    {
                        if (id == searchresponse[i].category.id)
                        {
                            return;
                        }
                    }
                }
            }

            Assert.Fail(name + ": " + "with category id:" + id +" " + "doesn't exist");
        }
        [Given(@"user sends a POST request to add a pet with a auto generated name and available status")]
        public void GivenUserWantsToAddAPetWithAAutoGeneratedNameAndAvailableStatus()
        {
            var payload = new PetObject()
            {
                id = 0,
                category = new Category
                {
                    id = 0,
                    name = "string",
                },          
                name = Data.AutoGeneratedName(10),
                photoUrls = new List<string> {"string" },
                tags = new List<Tag> { },
                status = "available"
            };
            string json = new JsonSerializer().Serialize(payload);
            client = new RestClient(Data.PetAPIAddPetURL);
            request = new RestRequest(Method.POST);
            request.AddHeader("Content-Type", "application/json");
            request.AddJsonBody(json);
            response = client.Post(request);

            if(response.IsSuccessful)
                Console.WriteLine(response.Content);
            string[] fullString = response.Content.Split(',');
            string result = fullString[0].Trim();
            string PetID = result.Substring(result.LastIndexOf(':') + 1);

            _featureContext.Add("PetID", PetID);
            _featureContext.Add("name", payload.name);
           
            Assert.AreEqual(200, (int)response.StatusCode);
        }

        [Then(@"verify the pet has been added")]
        public void ThenVerifyThePetHasBeenAdded()
        {
           Assert.IsTrue(response.Content.Contains(_featureContext["name"].ToString()));
        }
        [Given(@"user sends a GET request using the ID")]
        public void GivenUserSendsAGETRequestUsingTheID()
        {
            client = new RestClient(Data.PetAPIAddPetURL + "/" + _featureContext["PetID"]);
            request = new RestRequest(Method.GET);
        }

        [Then(@"verify pet is retured")]
        public void ThenVerifyPetIsRetured()
        {
            response = client.Execute(request);
            if (response.IsSuccessful)
                Assert.IsTrue(response.Content.Contains(_featureContext["name"].ToString()));
        }
    }
}
